ws://server:port/context_path
ws://localhost:9999/ws

rmi：remote method invocation 远程方法调用，跨机器的调用方式，只针对java
client 序列化成字节码的形式传递给server端，server以反序列化成自己需要的对象，
处理后序列化再以字节码的形式传递给client端，client端在反序列化成自己需要的形式。
序列化与反序列化：也叫做 编码encode与解码decode

rpc：remote procedure call 远程过程调用，很多rpc框架是跨语言的.
1.定义一个接口说明文件:描述了一个接口结构体，对象成员，接口方法等一系列信息
2.通过rpc框架所提供的编译器，将接口说明文件编译成具体的语言文件
3.在客户端和服务器端分别引入rpc编译器所生成的文件，即可像调用本地方法一样调用远程方法。

Thrift 传输格式
TBinaryProtocol - 二进制格式
TCompactProtocol - 压缩格式
TJSONProtocol - JSON格式
TSimpleJSONProtocal - 提供json只写协议，生成的文件很容易通过脚本语言解析。
TDebugProtocol - 使用易懂的可读的文本格式，以便于debug

Thrift 数据传输方式
TSocket - 阻塞式socket
TFramedTransport - 以frame为单位进行传输，非阻塞式服务中调用。
TFileTransport - 以文件形式进行传输。
TMemoryTransport - 将内存用于i/o，java实现时内部实际使用了简单的ByteArrayOutputStream。
TZlibTransport - 使用zlib进行压缩，与其他的传输方式联合使用。当前无java实现

Thrift 支持的服务模型
TSimpleServer - 简单的单线程服务模型，常用于测试。
TThreadPoolServer - 多线程服务模型，使用标准的阻塞式io。
TNonblockingServer - 多线程服务模型，使用非阻塞io(需使用TFramedTransport数据传输方式)
THsHaServer - THsHa引入了线程池去处理，其模型把读写任务放到线程池去处理；Half-sync/Half-async的处理模式，
    Half-async是在处理io时间上(accept/read/write io),Half-sync用于handler对rpc的同步处理。














